Please act as a professional verilog designer.

Implement an 8bit booth-4 multiplier. The module contains the following internal signals and registers:

p: 16-bit register to store the product
multiplier: 16-bit register to store the multiplier value
multiplicand: 16-bit register to store the multiplicand value
rdy: Ready signal register indicating the completion of the multiplication operation
ctr: 5-bit counter to keep track of the current bit position being processed in the multiplier
The module uses an always block sensitive to the positive edge of the clock signal (posedge clk) and the positive edge of the reset signal (posedge reset). Inside the always block, the behavior of the module is defined as follows:

During the reset condition (reset signal is high), the module initializes the registers and signals:

rdy is set to 0 to indicate that the multiplication operation is not yet complete.
p is set to 0 to clear the product register.
ctr is set to 0 to reset the counter.
multiplier is set to the sign-extended value of the a input, where the most significant bit of a is replicated to the left 8 bits of multiplier.
multiplicand is set to the sign-extended value of the b input, where the most significant bit of b is replicated to the left 8 bits of multiplicand.
During the non-reset condition, the module performs the Booth multiplication algorithm:

If the counter ctr is less than 16, the module shifts the multiplicand register to the left by 1 bit (multiplicand <= multiplicand << 1).
If the current bit of the multiplier at position ctr is 1, the module adds the shifted multiplicand to the p register (p <= p + multiplicand).
The counter ctr is incremented by 1 in each clock cycle.
Once the counter ctr reaches 16, the multiplication operation is complete, and the rdy signal is set to 1 to indicate readiness.

Module name:  
    booth4_mul               
Input ports：
   input clk, reset;
   input [7:0] a, b;
Output ports：
   output [15:0] p;
   output rdy;