Please act as a professional verilog designer.

Implement a radix-2 divider module and the inputs are two 8-bit operands. 
The registers remainder_reg, divisor_reg, and quotient_reg are used to store the current values of the remainder, divisor, and quotient, respectively. i is a 4-bit counter for the iterations.

Inside the always block, the code handles the initialization when rst_n is low. It sets the remainder_reg to the value of dividend, divisor_reg to the value of divisor, and quotient_reg to 0.

In the else block (when rst_n is high), the radix-2 division algorithm is executed.

The code performs four iterations to calculate the quotient and remainder. Each iteration checks if the remainder_reg is greater than or equal to a shifted version of the divisor_reg concatenated with zeros. If it is, the corresponding bit of the quotient is set to 1, and the remainder_reg is updated by subtracting the shifted divisor. Otherwise, the corresponding bit of the quotient is set to 0.

After each iteration, the bits of the quotient are shifted down by 4 positions to prepare for the next iteration.

The final quotient and remainder values are assigned to the output ports quotient and remainder, respectively.

Module name:  
    radix2_div               
Input ports：
    input 			[7:0]  		dividend 	,  		
    input 			[7:0]  		divisor 	,   	
    input						clk 	 	,	 	
    input                       rst_n	
Output ports：
    output 		[7:0] 	quotient 	,  		
    output 		[7:0] 	remainder